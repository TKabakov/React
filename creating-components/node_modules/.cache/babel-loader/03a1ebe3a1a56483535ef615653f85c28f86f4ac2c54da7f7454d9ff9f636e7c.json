{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Coding\\\\React\\\\creating-components\\\\src\\\\components\\\\Expression2.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n//The math prop is there to show that you can add arithmetic operators and numbers inside JSX, and it will be evaluated just like it does in plain JavaScript. \n// \nfunction Expression2(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"The value of the toggleBoolean prop is: \", props.toggleBoolean.toString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"The value of the main prop is: \", /*#__PURE__*/_jsxDEV(\"em\", {\n        children: props.math\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 47\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"The value of str is: \", /*#__PURE__*/_jsxDEV(\"em\", {\n        children: props.str\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 37\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 9\n  }, this);\n}\n_c = Expression2;\n;\nexport default Expression2;\nvar _c;\n$RefreshReg$(_c, \"Expression2\");","map":{"version":3,"names":["Expression2","props","_jsxDEV","children","toggleBoolean","toString","fileName","_jsxFileName","lineNumber","columnNumber","math","str","_c","$RefreshReg$"],"sources":["C:/Users/User/Coding/React/creating-components/src/components/Expression2.js"],"sourcesContent":["//The math prop is there to show that you can add arithmetic operators and numbers inside JSX, and it will be evaluated just like it does in plain JavaScript. \r\n// \r\nfunction Expression2 (props) {\r\n    return (\r\n        <div>\r\n            <h2>\r\n            The value of the toggleBoolean prop is: {props.toggleBoolean.toString()}\r\n            </h2>\r\n            <p>The value of the main prop is: <em>{props.math}</em></p>\r\n            <p>The value of str is: <em>{props.str}</em></p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Expression2;"],"mappings":";;AAAA;AACA;AACA,SAASA,WAAWA,CAAEC,KAAK,EAAE;EACzB,oBACIC,OAAA;IAAAC,QAAA,gBACID,OAAA;MAAAC,QAAA,GAAI,0CACoC,EAACF,KAAK,CAACG,aAAa,CAACC,QAAQ,EAAE;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAClE,eACLP,OAAA;MAAAC,QAAA,GAAG,iCAA+B,eAAAD,OAAA;QAAAC,QAAA,EAAKF,KAAK,CAACS;MAAI;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI,eAC3DP,OAAA;MAAAC,QAAA,GAAG,uBAAqB,eAAAD,OAAA;QAAAC,QAAA,EAAKF,KAAK,CAACU;MAAG;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAC9C;AAEd;AAACG,EAAA,GAVQZ,WAAW;AAUnB;AAED,eAAeA,WAAW;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}